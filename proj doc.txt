"""classMain"""
# responsible for handling user input and displaying the current game state object

import pygame as p
import chessEngine

WIDTH = 712
HEIGHT = 712
DIMENSION = 8 # dimension of the board are 8*8
SQ_SIZE = HEIGHT // DIMENSION
MAX_FPS = 15 # for animation
IMAGES = {}

# initialize a global dictionary of images. This will be called exactly once in the main

def loadimages():
    pieces = ['wp','wK', 'wR', 'wN', 'wB', 'wQ', 'bp', 'bR', 'bN', 'bB', 'bK', 'bQ']
    for piece in pieces:
        IMAGES[piece] = p.transform.scale(p.image.load("image/" + piece + ".png"), (SQ_SIZE, SQ_SIZE))

"""
the main driver of the code. this will handle user input and updating the graphics
"""

def main():   
    p.init()
    screen = p.display.set_mode((WIDTH, HEIGHT))
    clock = p.time.Clock()
    screen.fill(p.Color("white"))
    gs = chessEngine.Gamestate()
    validmoves = gs.getvalidmoves()
    movemade = False #flag varable for when a move is made
    animate = False #flag var
    loadimages()
    running = True
    sqSelected = () #keep track of last click of user
    playerclick = [] #keep track of player click
    gameover = False
    while running:
        for i in p.event.get():
            if i.type == p.QUIT:
                running = False
            elif i.type == p.MOUSEBUTTONDOWN:
                if not gameover:
                    location = p.mouse.get_pos() #x and y pos of mouse
                    col = location[0]//SQ_SIZE
                    row = location[1]//SQ_SIZE
                    if sqSelected == (row, col): #the user clicked the same square twice
                        sqSelected = () #unselect
                        playerclick = [] #clear player clicks
                    else:
                        sqSelected = (row , col)
                        playerclick.append(sqSelected)#append for both 1st and 2nd clicks
                
                    if len(playerclick) == 2: #after 2nd click
                        move = chessEngine.Move(playerclick[0],playerclick[1], gs.board)
                        print(move.getChessNotation())
                        for a in range(len(validmoves)):
                            if move == validmoves[a]:
                                gs.makemove(validmoves[a])
                                movemade = True
                                animate = True
                                sqSelected = () #reset user click
                                playerclick = []
                        if not movemade:
                            playerclick = [sqSelected]
            elif i.type == p.KEYDOWN:
                if i.key == p.K_z: #undo when "z" is pressed
                    gs.undomove()
                    movemade = True
                    animate = False
                if i.key == p.K_r: #reset the board when r is pressed
                    gs = chessEngine.Gamestate()
                    validmoves = gs.getvalidmoves()
                    sqSelected = ()
                    playerclick = []
                    movemade = False
                    animate = False

        if movemade:
            if animate:
               animationmove(gs.moveLog[-1], screen,gs.board, clock)
            validmoves = gs.getvalidmoves()
            movemade = False
            animate = False

        drawGameState(screen, gs, validmoves, sqSelected)
        if gs.checkmate:
            gameover = True
            if gs.whiteToMove:
                drawtext(screen, 'Black wins by checkmate')
            else:
                drawtext(screen , 'white wins ny checkmate')
        elif gs.stalemate:
            gameover = True
            drawtext(screen,'stalemate')
        clock.tick(MAX_FPS)
        p.display.flip()
        
"""
highlight square selected moves
"""

def hightlightSquares(screen,gs,validmoves , sqSelected):
    if sqSelected != ():
        i , j = sqSelected
        if gs.board[i][j][0] == ('w' if gs.whiteToMove else 'b'):
            #highlight selected square
            s = p.Surface((SQ_SIZE, SQ_SIZE))
            s.set_alpha(100)
            s.fill(p.Color('blue'))
            screen.blit(s,(j*SQ_SIZE, i*SQ_SIZE))
            s.fill(p.Color('black'))
            for move in validmoves:
                if move.startrow == i and move.startcol == j:
                    screen.blit(s, (move.endcol*SQ_SIZE, move.endrow*SQ_SIZE))


"""
responsible for all the graphics within a board
"""
def drawGameState(screen, gs, validmoves, sqselected):

    drawboard(screen)#draw squares on the board
    hightlightSquares(screen,gs,validmoves,sqselected)
    drawpieces(screen, gs.board)

"""
draw the square on the board , the top left square is always light
"""
def drawboard(screen):
    global colors
    colors = [p.Color("white"), p.Color("green")]
    for i in range(DIMENSION):
        for j in range(DIMENSION):
            color = colors[((i+j) % 2)]
            p.draw.rect(screen, color, p.Rect(j*SQ_SIZE, i*SQ_SIZE, SQ_SIZE, SQ_SIZE))

"""
draw the pieces on the board using the current game state.board
"""

def drawpieces(screen, board):
    for i in range(DIMENSION):
        for j in range(DIMENSION):
            piece = board[i][j]
            if piece != "--":
                screen.blit(IMAGES[piece], p.Rect(j*SQ_SIZE, i*SQ_SIZE, SQ_SIZE, SQ_SIZE))

def animationmove(move, screen , board , clock):
    global colors
    dr = move.endrow-move.startrow
    dc = move.endcol - move.startcol
    frampersquare = 10
    frameCount = (abs(dr)+ abs(dc)) * frampersquare
    for frame in range(frameCount +1):
        r , c = (move.startrow + dr*frame/frameCount,move.startcol + dc*frame/frameCount)
        drawboard(screen)
        drawpieces(screen,board)
        colors = colors[(move.endrow + move.endcol)%2]
        endsquare = p.Rect(move.endcol*SQ_SIZE, move.endrow*SQ_SIZE, SQ_SIZE,SQ_SIZE)
        if move.piececaptured != '--':
            screen.blit(IMAGES[move.piececaptured], endsquare)
        screen.blit(IMAGES[move.piecemoved], p.Rect(c*SQ_SIZE, r*SQ_SIZE , SQ_SIZE,SQ_SIZE))
        p.display.flip()
        clock.tick(60)
    
def drawtext(screen ,text):
    font = p.font.SysFont("Helvitca", 32 ,True , False)
    textobject = font.render(text, 0, p.Color('gray'))
    textlocation = p.Rect(0,0 , WIDTH, HEIGHT).move(WIDTH/2 - textobject.get_width()/2, HEIGHT/2 - textobject.get_height()/2)
    screen.blit(textobject, textlocation)
    textobject = font.render(text , 0, p.Color("black"))
    screen.blit(textobject  , textlocation.move(2,2))
if __name__ == "__main__":
    main()




"""classEngine""


class Gamestate():
    def __init__(self):
        self.board = [
            ["bR", "bN", "bB", "bQ", "bK", "bB", "bN", "bR"],
            ["bp", "bp", "bp", "bp", "bp", "bp", "bp", "bp"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["wp", "wp", "wp", "wp", "wp", "wp", "wp", "wp"],
            ["wR", "wN", "wB", "wQ", "wK", "wB", "wN", "wR"]]

        self.moveFunction = {'p': self.getPawnMoves, 'R':self.getRookMoves , 'N': self.getKnightMoves,
                            'B': self.getBishopMoves, 'Q': self.getQueenMoves, 'K': self.getKingMoves}
        self.whiteToMove = True
        self.moveLog = []
        self.whitekingLoc = (7, 4)
        self.blackkingLoc = (0,4)
        self.checkmate = False
        self.stalemate = False
        self.enpassantPossible = ()
    
    def makemove(self, move):
        self.board[move.startrow][move.startcol] = "--"
        self.board[move.endrow][move.endcol]= move.piecemoved
        self.moveLog.append(move) #log the move so we can undo later
        self.whiteToMove = not self.whiteToMove #swap player
        #update king location
        if move.piecemoved == 'wK':
            self.whitekingLoc = (move.endrow, move.endcol)
        elif move.piecemoved == 'bK':
            self.blackkingLoc = (move.endrow, move.endcol)
        #pawn promotion
        if move.ispawnpromotion:
            self.board[move.endrow][move.endcol] = move.piecemoved[0] + 'Q'

        if move.isEnpassantMove:
            self.board[move.startrow][move.endcol] = '--'
        
        if move.piecemoved[1] == 'p' and abs(move.startrow - move.endrow) == 2:
            self.enpassantPossible = ((move.startrow + move.endrow)//2, move.startcol)
        else:
            self.enpassantPossible = ()

    #undo the last move
    
    def undomove(self):
        if len(self.moveLog)!=0: #make sure that there is a move to undo
            move = self.moveLog.pop()
            self.board[move.startrow][move.startcol] = move.piecemoved
            self.board[move.endrow][move.endcol] = move.piececaptured
            self.whiteToMove = not self.whiteToMove #switch turns back 
             #update king location
            if move.piecemoved == 'wK':
                self.whitekingLoc = (move.startrow, move.startcol)
            elif move.piecemoved == 'bK':
                self.blackkingLoc = (move.startrow, move.startcol)
            
            if move.isEnpassantMove:
                self.board[move.startrow][move.startcol] = '--'
                self.board[move.startrow][move.endcol] = move.piececaptured
                self.enpassantPossible = (move.endrow, move.endcol)

            if move.piecemoved[1] == 'p' and abs (move.startrow - move.endrow) ==2:
                self.enpassantPossible = ()


    #all the moves considering checks
    

    def getvalidmoves(self):
        tempEnpassantpossible = self.enpassantPossible
        #generate all possible moves
        moves = self.getAllPossibleMoves()
        #for each move, make a move
        for a in range(len(moves)-1, -1 ,-1):  #when removing from list go backword throught list
            self.makemove(moves[a])
            self.whiteToMove = not self.whiteToMove
            if self.incheck():
                moves.remove(moves[a])  #if they do attack you king , not a valid move
            self.whiteToMove = not self.whiteToMove
            self.undomove()
        if len(moves) == 0: #either checkmate or stalemate
            if self.incheck():
                self.checkmate = True
            else:
                self.stalemate = True
        self.enpassantPossible = tempEnpassantpossible
        return moves


    def incheck(self):
        if self.whiteToMove:
            return self.squareUnderAttack(self.whitekingLoc[0], self.whitekingLoc[1])
        else:
            return self.squareUnderAttack(self.blackkingLoc[0], self.blackkingLoc[1])
    

    def squareUnderAttack(self, i, j):
        self.whiteToMove = not self.whiteToMove #switch to opponents turn
        #generate all opponents move
        oppmoves = self.getAllPossibleMoves()
        self.whiteToMove = not self.whiteToMove #switch turns back
        for move in oppmoves:
            if move.endrow == i and move.endcol == j: #squar in under attack
                return True
        return False


    def getAllPossibleMoves(self):
        moves = []
        for i in range(len(self.board)):
            for j in range(len(self.board[i])):
                turn = self.board[i][j][0]
                if(turn == 'w' and self.whiteToMove) or(turn == 'b' and not self.whiteToMove):
                    piece = self.board[i][j][1]
                    self.moveFunction[piece](i,j, moves) #call the appropiate move function based on piece type
        return moves

    def getPawnMoves(self,i,j, moves):
        if self.whiteToMove: # white pawn move
            if self.board[i-1][j] == "--": #1 square pawn advance
                moves.append(Move((i,j),(i-1, j), self.board))
                if i == 6 and self.board[i-2][j] == "--": #2ns square pawn advance
                    moves.append(Move((i,j), (i-2,j), self.board))
            if j-1 >=0:
                if self.board[i-1][j-1][0] == 'b': #enemy piece capture
                    moves.append(Move((i, j), (i-1 , j-1), self.board))
                elif (i-1, j+1) == self.enpassantPossible:
                    moves.append(Move((i, j), (i-1 , j+1), self.board, isEnpassantMove= True))

            if j+1<= 7: #captures to the right
                if self.board[i-1][j+1][0] == 'b':#enemy piece capture
                    moves.append(Move((i,j), (i-1 , j+1),self.board))
                elif (i-1, j-1) == self.enpassantPossible:
                    moves.append(Move((i, j), (i-1 , j-1), self.board, isEnpassantMove= True))

        else:#black pawn moves
            if self.board[i+1][j] == "--": #1 square move
                moves.append(Move((i,j),(i+1, j), self.board))
                if i == 1 and self.board[i+2][j] == "--": #2ns square pawn move
                    moves.append(Move((i,j), (i+2,j), self.board))
                
            #capture        
            if j-1 >=0:    #capture to left
                if self.board[i+1][j-1][0] == 'w': #enemy piece capture
                    moves.append(Move((i, j), (i+1 , j-1), self.board))
                elif (i+1, j-1) == self.enpassantPossible:
                    moves.append(Move((i, j), (i+1 , j-1), self.board, isEnpassantMove= True))
            if j+1<= 7: #captures to the right
                if self.board[i+1][j+1][0] == 'w':#enemy piece capture
                    moves.append(Move((i,j), (i+1 , j+1),self.board))
                elif (i+1, j+1) == self.enpassantPossible:
                    moves.append(Move((i, j), (i+1 , j+1), self.board, isEnpassantMove= True))

    def getRookMoves(self,i,j, moves):
        directions = ((-1,0), (0,-1),(1,0),(0,1))
        enemycolor = "b" if self.whiteToMove else "w"
        for d in directions:
            for a in range(1, 8):
                endrow = i + d[0] * a
                endcol = j +d[1]* a
                if 0<= endrow <8 and 0 <= endcol <8: #on board
                    endpiece = self.board[endrow][endcol]
                    if endpiece == "--":    #empty space valid
                        moves.append(Move((i,j), (endrow, endcol), self.board))
                    elif endpiece[0] == enemycolor:     #enemy piece valid
                        moves.append(Move((i,j), (endrow, endcol), self.board))
                        break
                    else:   #friendly piece valid
                        break
                else:   #off board
                    break

    def getKnightMoves(self,i,j, moves):
        knightmoves = ((-2,-1), (-2,1), (-1,-2),(-1,2),(1,-2),(1,2),(2,-1),(2,1))
        allycolor = "w" if self.whiteToMove else "b"
        for m in knightmoves:
            endrow = i + m[0]
            endcol = j +m[1]
            if 0<= endrow <8 and 0 <= endcol <8:
                endpiece = self.board[endrow][endcol]
                if endpiece[0]!= allycolor: #not an ally piece
                    moves.append(Move((i,j), (endrow, endcol), self.board))

    def getBishopMoves(self,i,j, moves):
        directions = ((-1,-1), (-1,1),(1,-1),(1,1))
        enemycolor = "b" if self.whiteToMove else "w"
        for d in directions:
            for a in range(1, 8):
                endrow = i + d[0] * a
                endcol = j +d[1]* a
                if 0<= endrow <8 and 0 <= endcol <8: #on board
                    endpiece = self.board[endrow][endcol]
                    if endpiece == "--":    #empty space valid
                        moves.append(Move((i,j), (endrow, endcol), self.board))
                    elif endpiece[0] == enemycolor:     #enemy piece valid
                        moves.append(Move((i,j), (endrow, endcol), self.board))
                        break
                    else:   #friendly piece valid
                        break
                else:   #off board
                    break


    def getKingMoves(self,i,j, moves):
        kingmoves = ((-1,-1), (-1,0), (-1,1), (0,-1), (0,1),( 1,-1), (1,0), (1,1))
        allycolor = "w" if self.whiteToMove else "b"
        for a in range(8):
            endrow = i + kingmoves[a][0]
            endcol = j + kingmoves[a][1]
            if 0 <=endrow < 8 and 0<=endcol <8:
                endpiece = self.board[endrow][endcol]
                if endpiece[0] != allycolor:     #enemy piece valid
                        moves.append(Move((i,j), (endrow, endcol), self.board))

    def getQueenMoves(self,i,j, moves):
        self.getRookMoves(i,j,moves)
        self.getBishopMoves(i,j, moves)


class Move():
    ranktorows = {"1":7, "2":6, "3":5, "4":4, "5":3, "6":2, "7":1, "8":0}
    rowstorank = {v:k for k ,v in ranktorows.items()}
    filestocols = {"a":0, "b":1, "c":2, "d":3, "e":4, "f":5, "g":6, "h":7}
    colstofiles = {v: k for k, v in filestocols.items()}

    def __init__(self, startsq, endsq, board, isEnpassantMove = False):
        self.startrow = startsq[0]
        self.startcol = startsq[1]
        self.endrow = endsq[0]
        self.endcol = endsq[1]
        self.piecemoved = board[self.startrow][self.startcol]
        self.piececaptured = board[self.endrow][self.endcol]
        #pawn promotion
        self.ispawnpromotion = (self.piecemoved =='wp' and self.endrow == 0) or (self.piecemoved == 'bp' and self.endrow == 7)
        
        self.isEnpassantMove =  isEnpassantMove
        if self.isEnpassantMove:
            self.piececaptured = 'wp' if self.piecemoved == 'bp' else 'bp'
            
        self.moveID = self.startrow*1000 + self.startcol *100 + self.endrow *10 + self.endcol
        
    #overriding the equals method

    def __eq__(self, other):
        if isinstance(other, Move):
            return self.moveID == other.moveID
        return False


    def getChessNotation(self):
        return self.getrankfile(self.startrow, self.startcol)+ self.getrankfile(self.endrow, self.endcol)

    
    def getrankfile(self, i,j):
        return self.colstofiles[j]+ self.rowstorank[i]
